name: deploy

on:
  push:
    branches:
      - master
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Lint Code Base
        uses: docker://github/super-linter:v3
        env:
          VALIDATE_KOTLIN: true
          VALIDATE_YAML: true
          VALIDATE_XML: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.1
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3

      - name: Prepare keystore.properties
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > release.jks.asc
          gpg -d --passphrase "${{ secrets.RELEASE_KEYSTORE_ENCRYPTION_PASSPHRASE }}" --batch release.jks.asc > release.jks
          echo "storeFile=$(realpath release.jks)" >> keystore.properties
          echo "storePassword=${secrets.RELEASE_KEYSTORE_STORE_PASSPHRASE}" >> keystore.properties
          echo "keyAlias=${secrets.RELEASE_KEYSTORE_ALIAS}" >> keystore.properties
          echo "keyPassword=${secrets.RELEASE_KEYSTORE_ALIAS_PASSPHRASE}" >> keystore.properties

      - name: Prepare google-api.json
        run: |
          echo "${{ secrets.RELEASE_API_JSON }}" > google-api.json.asc
          gpg -d --passphrase "${{ secrets.RELEASE_API_JSON_ENCRYPTION_PASSPHRASE }}" --batch google-api.json.asc > google-api.json
          echo "json_key_file(\"$(realpath google-api.json)\")" >> fastlane/Appfile

      - name: Deploy
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
            echo "Running lane 'deploy_aab_alpha'"
            bundle exec fastlane deploy_aab_alpha build:$GITHUB_RUN_NUMBER
          elif [ "$GITHUB_REF" == "refs/heads/develop" ]; then
            echo "Running lane 'deploy_aab_internal'"
            bundle exec fastlane deploy_aab_internal build:$GITHUB_RUN_NUMBER
          else
            echo "Unknown branch ${GITHUB_REF}. Aborting..."
            exit 1
          fie

      - name: Upload outputs artifact
        uses: actions/upload-artifact@v2
        with:
          name: outputs
          path: app/build/outputs/
