buildscript {
    ext {
        COMPILE_SDK = 30
        TARGET_SDK = 30
        MIN_SDK = 21

        // buildscript
        BUILD_TOOLS_VERSION = "4.1.2"
        DEXCOUNT_VERSION = "2.0.0"
        VERSIONS_VERSION = "0.36.0"

        // app
        KOTLIN_VERSION = "1.4.21"
        KOTLIN_COROUTINES_VERSION = "1.4.2"
        ANDROIDX_CORE_KTX_VERSION = "1.3.2"
        ANDROIDX_FRAGMENT_KTX_VERSION = "1.2.5"
        ANDROIDX_RECYCLERVIEW_VERSION = "1.1.0"
        ANDROIDX_MATERIAL_VERSION = "1.3.0"
        ANDROIDX_DATASTORE_VERSION = "1.0.0-alpha06"
        ANDROIDX_LIFECYCLE_LIVEDATA_KTX_VERSION = "2.2.0"
        DAGGER_VERSION = "2.31.2"
        DAGGER_HILT_VERSION = "2.32-alpha"
        DAGGER_HILT_VIEWMODEL_VERSION = "1.0.0-alpha03"
        TIMBER_VERSION = "4.7.1"
        MATERIAL_DIALOGS_VERSION = "3.3.0"
        ABOUT_LIBRARIES_VERSION = "8.8.0"

        // app debug
        BEAGLE_VERSION = "2.4.4"
    }

    repositories {
        google()
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$BUILD_TOOLS_VERSION"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$DAGGER_HILT_VERSION"
        classpath "com.mikepenz.aboutlibraries.plugin:aboutlibraries-plugin:$ABOUT_LIBRARIES_VERSION"
        classpath "com.getkeepsafe.dexcount:dexcount-gradle-plugin:$DEXCOUNT_VERSION"
        classpath "com.github.ben-manes:gradle-versions-plugin:$VERSIONS_VERSION" // allows checking for new versions with './gradlew dependencyUpdates -Drevision=release'
    }
}

apply plugin: "com.github.ben-manes.versions"

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" } // for debugdrawer
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    // Injected Variables
    MAJOR_VERSION = project.hasProperty("major") ? Integer.parseInt(major) : 1
    MINOR_VERSION = project.hasProperty("minor") ? Integer.parseInt(minor) : 2
    HOTFIX_VERSION = project.hasProperty("hotfix") ? Integer.parseInt(hotfix) : 1
    BUILD_NUMBER = project.hasProperty("build") ? Integer.parseInt(build) % 1000 : 0

    if (MAJOR_VERSION < 0 || MAJOR_VERSION > 99) {
        throw new IllegalArgumentException("major must be 0-99")
    }
    if (MINOR_VERSION < 0 || MINOR_VERSION > 99) {
        throw new IllegalArgumentException("minor must be 0-99")
    }
    if (HOTFIX_VERSION < 0 || HOTFIX_VERSION > 99) {
        throw new IllegalArgumentException("hotfix must be 0-99")
    }
    if (BUILD_NUMBER < 0) {
        throw new IllegalArgumentException("build must be 0 or bigger")
    }

    VERSIONCODE = MAJOR_VERSION * 10000000 + MINOR_VERSION * 100000 + HOTFIX_VERSION * 1000 + BUILD_NUMBER
    VERSIONNAME = "$MAJOR_VERSION.$MINOR_VERSION.$HOTFIX_VERSION.$BUILD_NUMBER"

    println "##### (Injected) variables #####"
    println "MAJOR: " + MAJOR_VERSION
    println "MINOR: " + MINOR_VERSION
    println "HOTFIX: " + HOTFIX_VERSION
    println "BUILD: " + BUILD_NUMBER
    println "VERSIONCODE: " + VERSIONCODE
    println "VERSIONNAME: " + VERSIONNAME
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
